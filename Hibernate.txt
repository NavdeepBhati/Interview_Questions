hibernate

---Table Per Hierarchy
	--Creates single table including parent
	-- You need to use @Inheritance(strategy=InheritanceType.SINGLE_TABLE), @DiscriminatorColumn and @DiscriminatorValue annotations for mapping table per hierarchy strategy.
	
		@Entity  
		@Table(name = "employee101")  
		@Inheritance(strategy=InheritanceType.SINGLE_TABLE)  
		@DiscriminatorColumn(name="type",discriminatorType=DiscriminatorType.STRING)  
		@DiscriminatorValue(value="employee")  
		  
		public class Employee {  
		@Id  
		@GeneratedValue(strategy=GenerationType.AUTO)  
			  
		@Column(name = "id")  
		private int id;  
		  
		@Column(name = "name")  
		private String name;  

https://www.javatpoint.com/hibernate-table-per-hierarchy-using-annotation-tutorial-example

---Table Per Concrete
	--creates 2+ tables. Duplicate column of parent would be in child table. 
	
	--@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS) specifies that we are using table per concrete class strategy. It should be specified in the parent class only.

	--@AttributeOverrides defines that parent class attributes will be overriden in this class. In table structure, parent class table columns will be added in 
		the subclass table.		
	
	https://www.javatpoint.com/hibernate-table-per-concrete-class-using-annotation-tutorial-example	

---Table Per Subclass
	--creates 2+tables. Parent primary key would be shared in child table (child will not have personal primar key )
	--We need to specify @Inheritance(strategy=InheritanceType.JOINED) in the parent class and @PrimaryKeyJoinColumn annotation in the subclasses.
	
---Merge vs Update 
	http://www.onlinetutorialspoint.com/hibernate/difference-between-update-vs-merge-example.html
	--Both update() and merge() methods in hibernate are used to convert the object which is in detached state into persistence state.
	--When we call update() method, if the object already existed in cache update() method will throw exception where as merge() method copies the changes in   
	  to cache.
	  
	    Session session2 = factory.openSession();
        Student student2 = session2.get(Student.class, 111);
        Transaction tx = session2.beginTransaction();
 
        session2.update(student); // throw exception NonUniqueObjectException
        session2.merge(student);  // works fine

		  tx.commit();
	  
	--Hibernate merge can be used to update existing values, however this method create a copy from the passed entity object and return it. The returned object 
	  is part of persistent context and tracked for any changes, passed object is not tracked  
		Employee emp4 = (Employee) session.merge(emp);
		
	--Trying to call update on a transient instance will result in an exception. The following will not work:

			Person person = new Person();
			person.setName("John");
			session.update(person); // PersistenceException!  
			
			
---Getsession vs open session
            Parameter                openSession                                          getCurrentSession
		Session object         -It always create new Session object            -It creates a new Session if not exists , else use same session which is in 		
																				current hibernate context
		Flush and close        -You need to explicitly flush and               -You do not need to flush and close session objects, it will be automatically 
		                        close session objects                           taken care by Hibernate internally
		Performance            -In single threaded environment , It is   	   -In single threaded environment , It is faster than getOpenSession
								slower than getCurrentSession
		Configuration		   -You do not need to configure any property 	   -You need to configure additional property
								to call this method           					“hibernate.current_session_context_class”  to call getCurrentSession method, 
																				 otherwise it will throw exceptions.  

---Save vs persist
https://www.journaldev.com/3481/hibernate-session-merge-vs-update-save-saveorupdate-persist-example
   -Save
	--As the method name suggests, hibernate save() can be used to save entity to database. We can invoke this method outside a transaction, that’s why I don’t like this method to save data. If we use this without transaction and we have cascading between entities, then only the primary entity gets saved unless we flush the session.
	--We should avoid save outside transaction boundary, otherwise mapped entities will not be saved causing data inconsistency.
	--Hibernate save method returns the generated id immediately, this is possible because primary object is saved as soon as save method is invoked.
	--If there are other objects mapped from the primary object, they gets saved at the time of committing transaction or when we flush the session.
	
  -Persist
	--Hibernate persist is similar to save (with transaction) and it adds the entity object to the persistent context, so any further changes are tracked. If the object properties are changed before the transaction is committed or session is flushed, it will also be saved into database.

   --Second difference is that we can use persist() method only within the boundary of a transaction, so it’s safe and takes care of any cascaded objects.

   --Finally, persist doesn’t return anything so we need to use the persisted object to get the generated identifier value.
																					 
																					 
---Bag 
	https://codesjava.com/hibernate-bag-mapping
	-A Bag is a java collection that stores elements without caring about the sequencing, but allow duplicate elements in the list. A bag is a random grouping of the objects in the list.

	-A Collection is mapped with a <bag> element in the mapping table and initialized with java.util.ArrayList.
	-Can contain Duplicates and No Order (Also called, Unordered List or Set with duplicates).
	
		-Example :
			<bag name="employees" table="employee"
					inverse="true" lazy="true" fetch="select">
				<key>
					<column name="employee_id" not-null="true" />
				</key>
				<one-to-many class="net.viralpatel.hibernate.Employee" />
			</bag>	
																						 
																					 
---Eager vs Lazy loading
https://www.youtube.com/watch?v=RmnrgocuivQ&lc=UghnXmRRrAdmrHgCoAEC

	-- By default hibernate supports lazy loading.
	 Example : 
	 
		@Entity
		public class Employee {

			@Id
			private int id;  
			
			//@NotNull
			private String firstName;  
			
			//@NotNull
			private String lastName;
			
			
			@OneToOne(	fetch=FetchType.EAGER,optional=false)
																//Adress will be loaded lazily
																//So if the get statement is within the session than its okay 
																// else it will give Lazy initialization exception error to solve it make it eager.
			@PrimaryKeyJoinColumn 								
			private Address address;
			
		-When we call  Employee e = (Employee) session.get(Employee.class, 1);
		-This will fetch the employee object(proxy) and address is not loaded.
		-When we make the very first call of address it will hit the db and return address.
		-But it should be within session otherwise it will throw LazyInitializationExeception. To resolve this we need to make dependent entity to fetch eager.
		
	
	
	 
--- Default lazy strategy 

		-OneToMany	: 		LAZY
		-ManyToOne	: 		EAGER
		-ManyToMany	: 		LAZY
		-OneToOne	:		EAGER
	
	
--- Criteria Query
	https://www.tutorialspoint.com/hibernate/hibernate_criteria_queries.htm

	--The Criteria API allows us to build up a criteria query object programmatically, where we can apply different kind of filtration rules and logical 
	  conditions.
	--And the Session provides the createCriteria() API – which can be used to create a Criteria object that returns instances of the persistence object’s 
	  class when we execute a query.																	

	 1) Restrictions like less than, greater than, like, between 
	  
	  --Example:
			Criteria cr = session.createCriteria(Employee.class);
			cr.add(Restrictions.eq("salary", 2000));
			List results = cr.list();
	
	2) And Or Logical Expressions
		
	 --Example:
	
		Criteria cr = session.createCriteria(Employee.class);

		Criterion salary = Restrictions.gt("salary", 2000);
		Criterion name = Restrictions.ilike("firstNname","zara%");

		// To get records matching with OR conditions
		LogicalExpression orExp = Restrictions.or(salary, name);
		cr.add( orExp );	
		
	3)Pagination
	--Example:
		Criteria cr = session.createCriteria(Employee.class);
		cr.setFirstResult(1);
		cr.setMaxResults(10);
		List results = cr.list();
		
	4)Sorting
	--Example:
			
		Criteria cr = session.createCriteria(Employee.class);

		// To get records having salary more than 2000
		cr.add(Restrictions.gt("salary", 2000));

		// To sort records in descening order
		cr.addOrder(Order.desc("salary"));	
		
	5)Projections and Aggregatons like average, maximum, or minimum
	--Example:

		Criteria cr = session.createCriteria(Employee.class);

		// To get total row count.
		cr.setProjection(Projections.rowCount());

		// To get average of a property.
		cr.setProjection(Projections.avg("salary"));

		// To get distinct count of a property.
		cr.setProjection(Projections.countDistinct("firstName"));

		// To get maximum of a property.
		cr.setProjection(Projections.max("salary"));	
	
---Named Queries
	--Named queries are created via class-level annotations on entities; normally, the queries apply to the entity in whose source file they occur, but there’s 
	  no absolute requirement for this to be true.
	
	--Example:
		@NamedQueries({
				@NamedQuery(name = "supplier.findAll", query = "from Supplier s"),
				@NamedQuery(name = "supplier.findByName",
						query = "from Supplier s where s.name=:name"),
		})	
		
		Query query = session.getNamedQuery("supplier.findAll");
		List<Supplier> suppliers = query.list();
		
---HQL
	--It is not used for DDL queries e.g. to alter table structure

	--Example:
		String hql = "from Product where price > :price";
		Query query = session.createQuery(hql);
		query.setDouble("price",25.0);
		List results = query.list();		

		
---Native SQL:
	--Example
		String sql = "select avg(product.price) as avgPrice from Product product";
		SQLQuery query = session.createSQLQuery(sql);
		query.addScalar("avgPrice",Hibernate.DOUBLE);
		List results = query.list();	
		
---First Level Cache 

	-Its easy to understand the first level cache if we understand the fact that it is associated with Session object.
	-As we know session object is created on demand from session factory and it is lost, once the session is closed.
	-Similarly, first level cache associated with session object is available only till session object is live.
	-It is available to session object only and is not accessible to any other session object in any other part of application.
	-The loaded entity can be removed from session using evict() method. The next loading of this entity will again make a database call if it has been removed 
	 using evict() method.
	-The whole session cache can be removed using clear() method. It will remove all the entities stored in cache.	
	

---Auto Generated Values
	https://www.objectdb.com/java/jpa/entity/generated

	--Four Tpes		
		-The Auto Strategy
		-The Identity Strategy
		-The Sequence Strategy
		-The Table Strategy	
			
	
	
	
///////////////////////////////////////////////////////////////////////////////////////////////////////

---Call stored procedure in hibaernate 
	-We call suinfg named Query
	
	-Example:
	1)
		-Declare
			@NamedNativeQueries({
				@NamedNativeQuery(
				name = "callStockStoreProcedure",
				query = "CALL GetStocks(:stockCode)",
				resultClass = Stock.class
				)
			})
			@Entity
			@Table(name = "stock")
			public class Stock implements java.io.Serializable {	
			
			
		-CaLL 
			Query query = session.getNamedQuery("callStockStoreProcedure")
				.setParameter("stockCode", "7277");
			List result = query.list();
			for(int i=0; i<result.size(); i++){
				Stock stock = (Stock)result.get(i);
				System.out.println(stock.getStockCode());
			}		
	
	2)
	
		Query query = session.createSQLQuery(
			"CALL GetStocks(:stockCode)")
			.addEntity(Stock.class)
			.setParameter("stockCode", "7277");
					
		List result = query.list();
		for(int i=0; i<result.size(); i++){
			Stock stock = (Stock)result.get(i);
			System.out.println(stock.getStockCode());
		}	
		
		
---@Embedded Id
	--It is used  to create Composite Key.
	
	-Example
			
		@Entity
		public class Project {
			@EmbeddedId ProjectId id;
			 :
		}

		@Embeddable
		Class ProjectId {
			int departmentId;
			long projectId;
		}	
		
		
		