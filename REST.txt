Rest Services

---REST is an architectural style for designing distributed systems.
	It is not a standard but a set of constraints, such as being stateless, having a client/server relationship, and a uniform interface.
	REST is not strictly related to HTTP, but it is most commonly associated with it.


---HTTP method types
	--GET
		-Retrieve information. GET requests must be safe and idempotent, meaning regardless of how many times it repeats with the same parameters, the results  
		 are the same. They can have side effects, but the user doesn't expect them, so they cannot be critical to the operation of the system. Requests can also be partial or conditional.

		Retrieve an address with an ID of 1:           GET /addresses/1

	--POST
		-Request that the resource at the URI do something with the provided entity. Often POST is used to create a new entity, but it can also be used to update. Not idempotent
		 an entity.

		Create a new address:                           POST /addresses
		
	--PUT
	   - Store an entity at a URI. PUT can create a new entity or update an existing one. A PUT request is idempotent. Idempotency is the main difference between the expectations of PUT versus a POST request.
	   
	   Modify the address with an ID of 1:               PUT /addresses/1
	   
	 --DELETE
	   -Request that a resource be removed; however, the resource does not have to be removed immediately. It could be an asynchronous or long-running request.
   
       -Delete an address with an ID of 1:               DELETE /addresses/1   
	   
	   
---HTTP status codes
	-Status codes indicate the result of the HTTP request.
	
		1XX - informational
		2xx Success
			200 OK
			201 Created
			204 No Content
		3xx Redirection
			304 Not Modified
		4xx Client Error
			400 Bad Request
			401 Unauthorized
			403 Forbidden
			404 Not Found
			409 Conflict
		5xx Server Error
			500 Internal Server Error
			503 Service Unavailable

---Media types
   --1 Accept:- HTTP headers can be used to describe the content being sent or requested within an HTTP request. 
				The client may set Accept to application/json if it is requesting a response in JSON.		
				
   --2 Content-Type:- When sending data, setting the Content-Type to application/xml tells the client that the data being sent in the request is XML.		

---MIME types
	--@Produces
		The @Produces annotation is used to specify the MIME media types of representations a resource can produce and send back to the client.
	--@consumes
	
---@ResponseStatus -- to set the status 	
		
		
   
 //////////////////////////////////////////////////////////////////SOAP///////////////////////////////////////////////////////////////////////

---WSDL 
		Types: 		This defines the message data types, which are in the form of XML schema, used by the web services.
		Message: 	This defines the data elements for each operation where messages could be the entire document or an argument that is to be mapped.
		Port Type: 	There are multiple services present in WSDL. Port type defines the collection of operations that can be performed for binding.
		Binding: 	Determines and defines the protocol and data format for each port type.
		Operations: This defines the operations performed for a message to process the message.
		
		
---JAX RPC is obsolete		
	 Thus the successor to JAX-RPC 1.1 is JAX-WS 2.0 - the Java API for XML-based web services.

---Reasons you may want to stay with JAX-RPC 1.1:

		If you want to stay with something that's been around a while, JAX-RPC will continue to be supported for some time to come.
		If you don't want to step up to Java 5.
		If you want to send SOAP encoded messages or create RPC/encoded style WSDL.

---Reasons to step up to JAX-WS 2.0:

		If you want to use the new message-oriented APIs.
		If you want to use MTOM to send attachment data.
		If you want better support for XML schema through JAXB.
		If you want to use an asynchronous programming model in your web service clients.
		If you need to have clients or services that can handle SOAP 1.2 messages.
		If you want to eliminate the need for SOAP in your web services and just use the XML/HTTP binding.
		If you like playing with leading edge technology.

	 
---WSDL styles 
		https://www.ibm.com/developerworks/library/ws-whichwsdl/	

		RPC/encoded
		RPC/literal
		Document/encoded
		Document/literal
		Document/literal wrapped---> Best Style Dosent suppot when overloaded methods are used as two opwerations would be having same name 
									use dcument/literal or RPC style 
