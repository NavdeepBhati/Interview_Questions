Angular

---You write Angular applications by composing HTML templates with Angularized markup, writing component classes to manage those templates, adding application 
	logic in services, and boxing components and services in modules.
	
---NgModule:- It is a decorator function that takes a single metadata object whose properties describe the module.	
		@NgModule({
		  imports:      [ BrowserModule ],
		  providers:    [ Logger ],
		  declarations: [ AppComponent ],
		  exports:      [ AppComponent ],
		  bootstrap:    [ AppComponent ]
		})
		
---Angular libraries :- Each Angular library name begins with the @angular prefix
		import { Component } from '@angular/core';
		
---component:- A component controls a patch of screen called a view.
	You define a component's application logic—what it does to support the view—inside a class. The class interacts with the view through an API of properties and methods.
	
	A component's job is to enable the user experience and nothing more. It mediates between the view (rendered by the template) and the application logic (which often includes some notion of a model). A good component presents properties and methods for data binding. It delegates everything nontrivial to services.
	
		export class HeroListComponent implements OnInit {
		}

---Templates:- You define a component's view with its companion template. A template is a form of HTML that tells Angular how to render the component.

---Metadata:- Metadata tells Angular how to process a class.
			To tell Angular that HeroListComponent is a component, attach metadata to the class.
			Example :- 	@Component, @Injectable, @Input, and @Output are a few of the more popular decorators.
		
		
		@Component({
		  selector:    'app-hero-list',						//the component's CSS element selector
		  templateUrl: './hero-list.component.html',		//HTML template
		  styleUrls: ['./hero-list.component.css'],			//CSS
		  providers:  [ HeroService ]						//array of dependency injection providers for services that the component requires
		})
		export class HeroListComponent implements OnInit {
		/* . . . */
		}
		
		Here is the @Component decorator, which identifies the class immediately below it as a component class.
		
		
---Data binding:- Angular supports data binding, a mechanism for coordinating parts of a template with parts of a component.

		<li>{{hero.name}}</li>										// interpolation displays the component's hero.name property value within the <li> element.
		<app-hero-detail [hero]="selectedHero"></app-hero-detail>	// Property Binding  passes the value of selectedHero  from parent to child component
		<li (click)="selectHero(hero)"></li>					// event binding calls the component's selectHero method when the user clicks a hero's name.	
			
		
	--Two-way data binding is an important fourth form that combines property and event binding in a single notation, using the ngModel directive		
		
					
					Event Binding --->
		Template <-------------------------> Component
					<---- Property Binding
		
---Directives:-A directive is a class with a @Directive decorator. 
			- A component is a directive-with-a-template; a @Component decorator is actually a @Directive decorator extended with template-oriented features.		
				
		Two types:-	
		1) Structural		
				
			<li *ngFor="let hero of heroes"></li>
			<app-hero-detail *ngIf="selectedHero"></app-hero-detail>		
		
		--*ngFor tells Angular to stamp out one <li> per hero in the heroes list.
		--*ngIf includes the HeroDetail component only if a selected hero exists.
		
		2) Attribute
			The ngModel directive, which implements two-way data binding, is an example of an attribute directive.
			Attribute directives alter the appearance or behavior of an existing element. In templates they look like regular HTML attributes, hence the name.
			
		We can also write custom directives also

---Services :- Service is a broad category encompassing any value, function, or feature that your application needs.
	--Component classes should be lean. They don't fetch data from the server, validate user input, or log directly to the console. They delegate such tasks 
	  to  services.

	--Examples include:

		logging service
		data service
		message bus
		tax calculator
		application configuration		
		
		
---Dependency injection :-		
	--Dependency injection is a way to supply a new instance of a class with the fully-formed dependencies it requires
	-- Most dependencies are services. Angular uses dependency injection to provide new components with the services they need.
	
	--Angular can tell which services a component needs by looking at the types of its constructor parameters.
		constructor(private service: HeroService) { }

	--Register the service either aat root level(avaailable to all ) or component level in providers tag.	
		-Registering at a component level means you get a new instance of the service with each new instance of that component.

				@Component({
				  selector:    'app-hero-list',
				  templateUrl: './hero-list.component.html',
				  providers:  [ HeroService ]
				})	
		
---Router: Navigate from page to page within the client application and never leave the browser.

---Pipes: Use pipes in your templates to improve the user experience by transforming values for display. Consider this currency pipe expression:
		price | currency:'USD':true
		It displays a price of 42.33 as $42.33.		
		
		
---Decorators :  Angular offers us a few class decorators. These are the top-level decorators that we use to express intent for classes. 
					They allow us to tell Angular that a particular class is a component, or module, for example. 
					And the decorator allows us to define this intent without having to actually put any code inside the class.
		
		--A @Component and @NgModule decorator
		
---Forms: Support complex data entry scenarios with HTML-based validation and dirty checking.		


						
Refer:-https://www.onlineinterviewquestions.com/angular2-interview-questions/
https://toddmotto.com/angular-decorators
https://angular.io/guide/quickstart


Prac


---Index.html 
		-It is the main file for html. Every HTML tag/seector should be mentioned here refering to app.component.ts(bootsrap component) file.
		-he CLI automatically adds all js and css files when building your app .
		
---app.module.ts 
		-Its is the file which contains import statement of entire application. 
		-It imports libraries, services and component from entire application 
		-It also contain @NgModule decorator.
		
		Example:
		
		@NgModule({
		  imports: [                 // Contains all imported modules(libraries)
			BrowserModule,
			FormsModule,
			HttpModule,
			AppRoutingModule
		  ],
		  declarations: [			// Containsa all components from entire application
			AppComponent,
			DashboardComponent,
			HeroDetailComponent,
			HeroesComponent
		  ],
		  providers: [ HeroService ],		// Containsa services from entire application
		  bootstrap: [ AppComponent ]		// Bootstrap component for the application
		})

---environment .ts
		-It specifies that the application is in dev mode.

---environment.prod.ts
		- It specifies that the application is in prod mode 	

		
		Example:
		export const environment = {
			production: false
		};

---main.ts 
	-The main entry point for your app. 
	-Compiles the application with the JIT compiler and bootstraps the application's root module (AppModule) to run in the browser. 
	
---favicon.ico
	-Icon in tab 
	
---ngOnInit vs Constructor
	
   --Constructor
	-Constructor is defined in TypeScript. Its is called right after the class is initialized.
	-It can be used to properly initialize fields. Angular 2’s DI (dependency injection) also tries to find providers that match the types of the   
	  constructor’s    parameters, resolves them, and passes them to the constructor as arguments.
	
	-Example:
	    export class AppComponent {

                  constructor(myService: MyService) {
                  this.samples = myService.getSamples();
                  this.sentence = ‘This is my constructor example.’;
			}
		}
		
	--ngOnInit
		-Its is angular functionality.
		-The ngOnInit method runs after the constructor method, meaning that all of the injected dependencies will be resolved and all of the class members   
		 will be defined. 
		-This makes it the perfect place to do any of the initialization work/logic for the component.
	
	-Example

		export class AppComponent implements OnInit {

                 constructor(myService: MyService) {

				//Let’s assume this will return an array of samples [‘sample 1’, ‘sample 2’, ‘sample 3’]
					this.samples = myService.getSamples();
					this.sentence = ‘Number of samples: ’;
				}

				ngOnInit() {
					this.countSamples();
				}

				countSamples() {

				//Result will be ‘Number of samples: 3’
					this.sentence = this.sentence + this.samples.length;
				}

		}	
	
---Observables: 
		-Observables provide support for passing messages between publishers and subscribers in your application.
		-Observables offer significant benefits over other techniques for event handling, asynchronous programming, and handling multiple values.


		
